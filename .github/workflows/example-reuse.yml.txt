name: first
on: [push]


env:
NPM_TOKEN: ${{secrets.NPM_TOKEN}}


jobs:
build:
    runs-on: ubuntu-latestname: dev-deployment
run-name: Buid dev image and deploy to dev server
on: 
  push:
    branches:
      - dev
   # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
env:
  IMAGE_TAG: "app"
  IMAGE_VERSION: "dev"

jobs:
  build-image:
      name: Build DEV docker image
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

          # Install doctl.
        - name: Install doctl
          uses: digitalocean/action-doctl@v2
          with:
            token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        - name: Log in to DigitalOcean Container Registry with short-lived credentials
          run: doctl registry login --expiry-seconds 1800

        -
          name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
        -
          name: Build image
          uses: docker/build-push-action@v2
          with:
            context: .
            file: ./deploy/php-fpm/production.Dockerfile
            tags: app-image:latest
            outputs: type=docker,dest=/tmp/myimage.tar
        -
          name: Upload artifact
          uses: actions/upload-artifact@v2
          with:
            name: app-image
            path: /tmp/myimage.tar

  run-tests:
      name: Run Tests
      needs: build-image
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        -
          name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
        -
          name: Download artifact
          uses: actions/download-artifact@v2
          with:
            name: app-image
            path: /tmp
        -
          name: Load Docker image
          run: |
            docker load --input /tmp/myimage.tar
            docker image ls -a
        # Run Tests
        -
          name: Run Test
          run: docker-compose -f deploy/test/docker-compose-test.yaml -p app run run-test
        # - 
        #   name: Upload logs to artifact
        #   uses: actions/upload-artifact@v2
        #   with:
        #     name: logs
        #     path: /tmp/myimage.tar

  push-image:
      name: Push DEV docker image to DigitalOcean
      needs: run-tests
      runs-on: ubuntu-latest
      steps:
        # - uses: actions/checkout@v4
        -
          name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
        -
          name: Download artifact
          uses: actions/download-artifact@v2
          with:
            name: app-image
            path: /tmp
        -
          name: Load Docker image
          run: |
            docker load --input /tmp/myimage.tar
            docker image ls -a
        - run: docker tag app-image:latest ${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_TAG }}:${{ env.IMAGE_VERSION }}

          # Install doctl.
        - name: Install doctl
          uses: digitalocean/action-doctl@v2
          with:
            token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        - name: Log in to DigitalOcean Container Registry with short-lived credentials
          run: doctl registry login --expiry-seconds 1800
        # Build a Docker image
        # - name: Build container image
        #   run: docker build -f deploy/php-fpm/production.Dockerfile -t ${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_TAG }}:${{ env.IMAGE_VERSION }} .
        - name: Push image to DigitalOcean Container Registry
          run: docker push ${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_TAG }}:${{ env.IMAGE_VERSION }}
  
        # # Delete cache
        # - uses: geekyeggo/delete-artifact@v5
        #   with:
        #       name: app-image
 
  clear-cache:
      name: Remove extra artifacts
      if: always()
      needs: [build-image, run-tests,push-image]
      runs-on: ubuntu-latest
      steps:
          # Deleting doesn't works by some reason, so we will rewrite artifact by empty file
          - run: touch /tmp/empty.txt
          -
            name: Upload artifact
            uses: actions/upload-artifact@v2
            with:
              name: app-image
              path: /tmp/empty.txt
          # - name: List artifacts
          #   id: list
          #   uses: yakubique/list-artifacts@v1.1
          #   with:
          #     name: "*"
          # Delete cache
          - uses: geekyeggo/delete-artifact@v5
            with:
                name: app-image
    steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v1
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
          id: buildx
          with:
            install: true
            buildkitd-flags: --debug
        - name: Cache Docker layers
          uses: actions/cache@v2
          with:
            path: /tmp/.buildx-cache
            key: ${{ runner.os }}-buildx-${{ github.sha }}
            restore-keys: |
                ${{ runner.os }}-buildx-
        - name: Bake Docker Image
          uses: docker/build-push-action@v2
          with:
            context: .
            builder: ${{ steps.buildx.outputs.name }}
            push: false
            tags: user/myimage:latest
            secrets: |
                "NPM_TOKEN=${{secrets.NPM_TOKEN}}"
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache-new
            outputs: type=docker,dest=/tmp/myimage.tar # export docker image
    - name: Upload artifact
    uses: actions/upload-artifact@v2
    with:
    name: myimage
    path: /tmp/myimage.tar
    # This ugly bit is necessary if you don't want your cache to grow forever
    # till it hits GitHub's limit of 5GB.
    # Temp fix
    # docker/build-push-action#252
    # moby/buildkit#1896
    - name: Move cache
    run: |
    rm -rf /tmp/.buildx-cache
    mv /tmp/.buildx-cache-new /tmp/.buildx-cache


use-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v1
    - name: Download artifact
    uses: actions/download-artifact@v2
    with:
    name: myimage
    path: /tmp
    - name: Load image
    run: |
    docker load --input /tmp/myimage.tar
    docker image ls -a